# -*- coding: utf-8 -*-
"""Atividade Pratica Algoritmo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hRTE88k5erShCJOdD677wgO9xdaRoAAh

**EXERCICIO 1**
"""

+

print ('Bem vindo a loja da Viviane de Oliveira Cezar da Cunha:')
valorProduto = float(input ('Digite o valor do produto:'))
quantidadeProduto = int(input('Digite quantidade do produto:'))
valorTotal = valorProduto * quantidadeProduto # calculo do valor total sem desconto
desconto = 0 # variavel para armazenar o % de desconto

if (quantidadeProduto <= 9):
  desconto = 0
elif (quantidadeProduto <= 99):
  desconto = 0.05
elif (quantidadeProduto <= 999):
  desconto = 0.10
else:
  desconto = 0.15

valorComDesconto = valorTotal -(valorTotal * desconto) # calculo do valor total com desconto

print ('O valor total foi de R$ {:.2f}'.format(valorTotal))
print ('Valor com desconto foi de R$ {:.2f}'.format (valorComDesconto))

"""**EXERCICIO 2**"""

def gerarProdutos(): #Cria uma lista de produtos
  produto1 = { 'codigo':'100', 'descricao':'Cachorro Quente', 'valor':9.00 }
  produto2 = { 'codigo':'101', 'descricao':'Cachorro Quente Duplo', 'valor':11.00 }
  produto3 = { 'codigo':'102', 'descricao':'X-Egg', 'valor':12.00 }
  produto4 = { 'codigo':'103', 'descricao':'X-Salada', 'valor':12.00 }
  produto5 = { 'codigo':'104', 'descricao':'X-Bacon', 'valor':14.00 }
  produto6 = { 'codigo':'105', 'descricao':'X-Tudo', 'valor':17.00 }
  produto7 = { 'codigo':'200', 'descricao':'Refrigerante Lata', 'valor':5.00 }
  produto8 = { 'codigo':'201', 'descricao':'Chá Gelado', 'valor':4.00 }

  produtos = [produto1, produto2, produto3, produto4, produto5, produto6, produto7, produto8]
  return produtos #retorna os produtos

def encontrarProduto(listaProdutos, codigoProduto):
  for produto in listaProdutos:
    if (produto['codigo'] == codigoProduto):
      return produto #retorna produto encontrado

  return None #retorna nulo se produto não encontrado


print ('Bem vindo a Lanchonete da Viviane de Oliveira Cezar da Cunha:')

listaProdutos = gerarProdutos() # recebe a lista de produtos

print('*** Cardápio ***')
print('| Código | Descrição | Valor|')

for produto in listaProdutos: #Exibe a lista de produtos
  print ('| {} |  {} |  R$ {:.2f} | '.format(produto['codigo'], produto['descricao'], produto['valor']))

valorTotal = 0.0

while True:
  codigoProduto = input('Digite o código do produto desejado: ')
  produtoSelecionado = encontrarProduto(listaProdutos, codigoProduto)
  if (produtoSelecionado != None):
    valorTotal = valorTotal + produtoSelecionado['valor']#Adiciona valor do produto encontrado ao total
    print ('Você pediu um {} no valor de R$ {:.2f}'.format(produtoSelecionado['descricao'], produtoSelecionado['valor']))
    novoItem = input('Deseja pedir mais alguma coisa? 1 = SIM | 2 = NÃO: ')

    # Verifica se adiciona um novo pedido ou não
    if (novoItem == '1'):
      continue
    elif (novoItem == '2'):
      break
    else:
      print ('Opção Inválida')
      break
  else:# Exibe mensagem se o produto não for encontrado
    print ('Opção Inválida')
    continue

print ('O total a ser pago é: R$ {:.2f}'.format(valorTotal))

"""**EXERCICIO 3**"""

#metodo que recebe uma mensagem a ser exibida e retorna a dimensao inserida pelo usuario
def pegarDimensaoObjeto(textoDeEntrada):
  dimensao = 0

  while True:
    textoDimensao = input(textoDeEntrada)

    try:#tenta converter o texto em inteiro
      dimensao = int(textoDimensao)
      break
    except:#Caso haja problema na conversão
      print ('Você digitou alguma dimensão do objeto com valor não numérico')

  return dimensao

#metodo para pegar e calcular o volume e o valor do objeto
def dimensoesObjeto():
  valorPorDimensao = 0
  volumeObjeto = 0

  while True:
    altura = pegarDimensaoObjeto('Digite a altura do objeto (em cm): ') #pede a altura
    largura = pegarDimensaoObjeto('Digite a largura do objeto (em cm): ') #pede a largura
    comprimento = pegarDimensaoObjeto('Digite a comprimento do objeto (em cm): ') #pede o comprimento

    volumeObjeto = altura * largura * comprimento #calcula o volume do objeto

    if (volumeObjeto < 1000):
      valorPorDimensao = 10
      break
    elif (volumeObjeto < 10000):
      valorPorDimensao = 20
      break
    elif (volumeObjeto < 30000):
      valorPorDimensao = 30
      break
    elif (volumeObjeto < 100000):
      valorPorDimensao = 50
      break
    else:
      print ('Não aceitamos objeto com dimensões tão grandes')

  print ('O volume do objeto é (em cm3): {}'.format(volumeObjeto))
  return valorPorDimensao

#metodo para pegar o peso do objeto e definir o multiplicador
def pesoObjeto():
  pesoObjeto = 0.0
  multiplicador = 0

  while True:
    textoPeso = input('Digite o peso do objeto (em Kg): ')

    try:#tenta converter o texto em float
      pesoObjeto = float(textoPeso)

      if (pesoObjeto <= 0.1):
        multiplicador = 1
        break
      elif (pesoObjeto <= 1):
        multiplicador = 1.5
        break
      elif (pesoObjeto <= 10):
        multiplicador = 2
        break
      elif (pesoObjeto <= 30):
        multiplicador = 3
        break
      else:
        print ('Não aceitamos objetos tão pesados')
    except:#caso haja problema na conversão
      print ('Você digitou peso do objeto com valor não numérico')

  return multiplicador

#metodo que cria, exibe e recebe a rota selecionada
def rotaObjeto():
  # criando rotas
  rota1 = {'sigla':'RS', 'descricao':'De Rio de Janeiro até São Paulo', 'multiplicador':1.0}
  rota2 = {'sigla':'SR', 'descricao':'De São Paulo até Rio de Janeiro', 'multiplicador':1.0}
  rota3 = {'sigla':'BS', 'descricao':'De Brasília até São Paulo', 'multiplicador':1.2}
  rota4 = {'sigla':'SB', 'descricao':'De São Paulo até Brasília', 'multiplicador':1.2}
  rota5 = {'sigla':'BR', 'descricao':'De Brasília até Rio de Janeiro', 'multiplicador':1.5}
  rota6 = {'sigla':'RB', 'descricao':'De Rio de Janeiro até Brasília', 'multiplicador':1.5}
  listaRotas = [rota1, rota2, rota3, rota4, rota5, rota6]

  multiplicador = 0.0

#recebendo rota e verificando se é uma rota valida
  while True:
    print ('Selecione a rota:')
    for rota in listaRotas:
      print ('{} - {}'.format(rota['sigla'], rota['descricao']))

    rotaRecebida = input()

    for rota in listaRotas:
      if (rotaRecebida == rota['sigla']):
        multiplicador = rota['multiplicador']
        break

    if (multiplicador == 0.0):
      print ('Você digitou uma rota que não existe')
    else:
      break

  return multiplicador

print ('Bem vindo a Companhia de Logistica da Viviane de Oliveira Cezar da Cunha S.A.')

valorPorDimensao = dimensoesObjeto()
multiPeso = pesoObjeto()
multiRota = rotaObjeto()

valorTotal = valorPorDimensao * multiPeso * multiRota #calculo de valor total

print ('Total a pagar (R$): {:.2f} (dimensões: {} * peso: {} * rota: {})'.format(valorTotal, valorPorDimensao, multiPeso, multiRota))

"""**EXERCICIO 4**"""

def mostrarMenu(): #metodo para exibir menu principal e retornar o selecionado
  print ('Escolha a opção desejada:')
  print ('1 - Cadastrar Peça')
  print ('2 - Consultar Peça')
  print ('3 - Remover Peça')
  print ('4 - Sair')
  selecao = input()

  return selecao

def cadastrarPeca(codigo):#metodo para cadastro de nova peça
  print ('Código da Peça {}'.format(codigo))
  nome = input('Entre com o NOME da peça: ')
  fabricante = input('Entre com o FABRICANTE da peça: ')
  valor = input('Entre com o VALOR (R$) da peça: ')

  #retorna um novo dicionario de dados
  return {'codigo':codigo, 'nome':nome, 'fabricante':fabricante, 'valor':valor}

def consultarPeca():#exibe menu de consulta e retorna a seleção
  print ('Escolha a opção desejada:')
  print ('1 - Consultar Todas as Peças')
  print ('2 - Consultar Peças por Código')
  print ('3 - Consultar Peças por Fabricante')
  print ('4 - Retornar')
  selecao = input()

  return selecao

def listarTodasPecas(listaPecas): #lista todas as peças da lista recebida
  for peca in listaPecas:
    print ('--------------------------')
    print ('Codigo : {}'.format(peca['codigo']))
    print ('Nome : {}'.format(peca['nome']))
    print ('Fabricante : {}'.format(peca['fabricante']))
    print ('Valor : {}'.format(peca['valor']))
    print ('--------------------------')

def consultarPecaPorcodigo(listaPecas):#recebe lista de peças para filtro
  codigo = input('Digite o CÓDIGO da Peça: ')

  pecaEncontrada = None

  for peca in listaPecas:#procura pela peça através do código
    if (peca['codigo'] == codigo):
      pecaEncontrada = peca

  if (pecaEncontrada != None):#exibe informações se a peça for encontrada
    print ('--------------------------')
    print ('Codigo : {}'.format(pecaEncontrada['codigo']))
    print ('Nome : {}'.format(pecaEncontrada['nome']))
    print ('Fabricante : {}'.format(pecaEncontrada['fabricante']))
    print ('Valor : {}'.format(pecaEncontrada['valor']))
    print ('--------------------------')
  else:#exibe mensagem se a peça não foi encontrada
    print ('Peça não encontrada')

def consultarPecaPorFabricante(listaPecas):#recebe lista de peças para filtro
  fabricante = input('Digite o FABRICANTE da Peça: ')

  pecasPorFabricante = []

  for peca in listaPecas:#procura por peças do fabricante recebido
    if (peca['fabricante'] == fabricante):
      pecasPorFabricante.append(peca)#adiciona na lista para exibição

  for peca in pecasPorFabricante:#exibe peças encontradas
    print ('--------------------------')
    print ('Codigo : {}'.format(peca['codigo']))
    print ('Nome : {}'.format(peca['nome']))
    print ('Fabricante : {}'.format(peca['fabricante']))
    print ('Valor : {}'.format(peca['valor']))
    print ('--------------------------')

def removerPeca(listaPecas):#recebe lista de peças para filtro
  codigo = input('Digite o CÓDIGO da Peça: ')

  pecaEncontrada = None

  for peca in listaPecas:#procura pela peça com mesmo codigo
    if (peca['codigo'] == codigo):
      pecaEncontrada = peca

  if (pecaEncontrada != None):
    listaPecas.remove(pecaEncontrada)#remove peça encontrada
  else:#exibe mensagem se a peça não foi encontrada
    print ('Peça não encontrada')

print ('Bem Vindo ao Controle de Estoque da Bicicletaria da Viviane de Oliveira Cezar da Cunha')

novoCodigo = 1 #código incremental para a peças
listaPecas = [] #lista base para as peças

while True:
  selecao = mostrarMenu()

  #verifica a seleção do usuario
  if (selecao == '1'):
    novaPeca = cadastrarPeca(str(novoCodigo))
    listaPecas.append(novaPeca)
    novoCodigo = novoCodigo + 1 #incrementa o código de peça
  elif (selecao == '2'):
    subSelecao = consultarPeca()

    #verifica a seleção do Consultar Peças
    if(subSelecao == '1'):
      listarTodasPecas(listaPecas)
    elif(subSelecao == '2'):
      consultarPecaPorcodigo(listaPecas)
    elif(subSelecao == '3'):
      consultarPecaPorFabricante(listaPecas)
  elif (selecao == '3'):
    removerPeca(listaPecas)
  elif (selecao == '4'):#sai do programa
    break